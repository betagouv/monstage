version: 2.1
orbs:
  node: circleci/node@5.2.0
  ruby: circleci/ruby@2.1.3
  browser-tools: circleci/browser-tools@1.4.8
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/project
    docker: # run the steps with Docker
      - image: cimg/ruby:3.3.0-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: monstage_test
          RAILS_ENV: test
          HOST: https://www.example.fr
      - image: cimg/postgres:16.3-postgis # database image with support of current dir
        environment: # environment variables for database
          POSTGRES_DB: monstage_test
          POSTGRES_USER: monstage_test
          POSTGRES_PASSWORD: monstage_test
      - image: cimg/redis:7.2.5 # redis image with support of current dir
        environment:
          REDIS_URL: localhost:6379

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - node/install:
          install-yarn: true
          node-version: '16.15'

      - browser-tools/install-chrome:
          replace-existing: true
          chrome-version: 'latest'

      - run:
          name: versions
          command: |
            google-chrome --version
            node -v
            ruby -v


      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - restore_cache:
          name: Restore yarn cache
          keys:
            - montage-yarn-cachebust{{ checksum "yarn.lock" }}

      - run:
          name: Yarn Install
          command:  |
            yarn install --ignore-engines --cache-folder ~/.cache/yarn

      - run:
          name: Assets precompile
          command: bundle exec rake webpacker:compile

      - save_cache:
          name: Store yarn cache
          key: montage-yarn-cachebust{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Wait for redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      - run:
          name: Load DB schema
          environment:
            DATABASE_URL: "postgis://monstage_test:monstage_test@localhost:5432/monstage_test"
          command: |
            sudo apt-get update --allow-releaseinfo-change && sudo apt install postgresql-client
            bundle exec bin/rails db:create db:schema:load --trace

      - run:
          name: Run TestUnit
          command: PARALLEL_WORKERS=4 bundle exec rake test
      # beware, system tests on CI with more than 1 PARALLEL_WORKERS leads to OOM errors
      - run:
          name: Run Desktop TestSystem with headless_chrome
          command: |
            mkdir test-results
            PARALLEL_WORKERS=1 ~/project/infra/test/system_desktop.sh
      - store_artifacts:
          path: tmp/screenshots

      - run:
          name: Run Mobile TestSystem with headless_chrome using chrome's iPhone 6 emulation
          command: PARALLEL_WORKERS=1 ~/project/infra/test/system_mobile.sh

      - run:
          name: Run Desktop w3c System with headless_chrome
          command: PARALLEL_WORKERS=1 ~/project/infra/test/system_w3c.sh

      - run:
          name: a11y validation
          command: ~/project/node_modules/.bin/pa11y-ci $(find ~/project/tmp/w3c/*.html -name '*.html')

      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs

  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e4:5e:41:50:5b:d3:91:e2:9f:ad:37:eb:60:36:cc:f3"
      - run:
          name: Deploy staging to Clever Cloud
          command: |
            ssh-keyscan push-par-clevercloud-customers.services.clever-cloud.com >>  ~/.ssh/known_hosts
            git remote add staging git+ssh://git@push-par-clevercloud-customers.services.clever-cloud.com/$CLEVER_APP_ID.git
            git push -u staging staging:master -f
workflows:
  version: 2
  build-deploy:
      jobs:
        - build
        - deploy:
            requires:
              - build
            filters:
              branches:
                only:
                  - staging

