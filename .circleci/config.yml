version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/project
    docker: # run the steps with Docker
      - image: circleci/ruby:2.6.5-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: monstage_test
          RAILS_ENV: test
          HOST: https://www.example.fr
      - image: circleci/postgres:10.6-alpine-postgis # database image
        environment: # environment variables for database
          POSTGRES_DB: monstage_test
          POSTGRES_USER: monstage_test
          POSTGRES_PASSWORD: monstage_test

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      # - run:
      #     name: Update Chromedriver
      #     command: |
      #       wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      #       sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
      #       sudo apt-get update
      #       sudo apt-get upgrade google-chrome-stable

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - restore_cache:
          name: Restore yarn cache
          keys:
            - montage-yarn-cachebust{{ checksum "yarn.lock" }}

      - run:
          name: Yarn Install
          command:  |
            npm config set "@fortawesome:registry" https://npm.fontawesome.com/
            npm config set "//npm.fontawesome.com/:_authToken" $FA_TOKEN
            yarn install --cache-folder ~/.cache/yarn

      - save_cache:
          name: Store yarn cache
          key: montage-yarn-cachebust{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Load DB schema
          environment:
            DATABASE_URL: "postgis://monstage_test:monstage_test@localhost:5432/monstage_test"
          command: |
            sudo apt-get install postgresql-client
            bundle exec bin/rails db:create db:structure:load --trace

      - run:
          name: Run TestUnit
          command: PARALLEL_WORKERS=3 bundle exec rake test

      # - run:
      #     name: Run TestSystem
      #     command: bundle exec rake test:system

      - run:
          name: w3c validation
          command: java -jar ~/project/node_modules/vnu-jar/build/dist/vnu.jar --errors-only ~/project/tmp/w3c/*.html

      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs

  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          command: |
            curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
            cat >~/.netrc <<EOF
            machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
            EOF
            chmod 600 ~/.netrc
      - run:
          name: Deploy Master to Heroku
          command: |
            git push -f https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git $CIRCLE_BRANCH:master
            heroku run rails db:migrate -a $HEROKU_APP_NAME
workflows:
  version: 2
  build-deploy:
      jobs:
        - build
        - deploy:
            requires:
              - build
            filters:
              branches:
                only: master
