version: 2.1
orbs:
  node: circleci/node@5.0.2
  browser-tools: circleci/browser-tools@1.4.3
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/project
    docker: # run the steps with Docker
      - image: circleci/ruby:2.7.2-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: monstage_test
          RAILS_ENV: test
          HOST: https://www.example.fr
      - image: circleci/postgres:12.0-alpine-postgis # database image with support of current dir
        environment: # environment variables for database
          POSTGRES_DB: monstage_test
          POSTGRES_USER: monstage_test
          POSTGRES_PASSWORD: monstage_test
      - image: circleci/redis:6.0.15-alpine
        environment:
          REDIS_URL: localhost:6379

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - node/install:
          install-yarn: true
          node-version: '16.15'

      - run:
          name: get missing parts for chrome
          command: |
            sudo apt-get update --allow-releaseinfo-change && sudo apt-get install -y libnss3 libgbm-dev systemd-sysv adwaita-icon-theme at-spi2-core dbus-user-session dconf-gsettings-backend dconf-service fonts-liberation glib-networking glib-networking-common glib-networking-services google-chrome-stable gsettings-desktop-schemas gtk-update-icon-cache libasound2 libasound2-data libatk-bridge2.0-0 libatk1.0-0 libatk1.0-data libatspi2.0-0 libauthen-sasl-perl libavahi-client3 libavahi-common-data libavahi-common3 libclone-perl libcolord2 libcups2 libdata-dump-perl libdconf1 libencode-locale-perl libepoxy0 libfile-basedir-perl libfile-desktopentry-perl libfile-listing-perl libfile-mimeinfo-perl libfont-afm-perl libgbm1 libgtk-3-0 libgtk-3-bin libgtk-3-common libhtml-form-perl libhtml-format-perl libhtml-parser-perl libhtml-tagset-perl libhtml-tree-perl libhttp-cookies-perl libhttp-daemon-perl libhttp-date-perl libhttp-message-perl libhttp-negotiate-perl libio-html-perl libio-socket-ssl-perl libio-stringy-perl libipc-system-simple-perl libjson-glib-1.0-0 libjson-glib-1.0-common liblua5.3-0 liblwp-mediatypes-perl liblwp-protocol-https-perl libmailtools-perl libnet-dbus-perl libnet-http-perl libnet-smtp-ssl-perl libnet-ssleay-perl libnspr4 libnss-systemd libnss3 libpam-systemd libproxy1v5 librest-0.7-0 libsoup-gnome2.4-1 libsoup2.4-1 libtext-iconv-perl libtie-ixhash-perl libtimedate-perl libtry-tiny-perl libu2f-udev liburi-perl libvte-2.91-0 libvte-2.91-common libwayland-cursor0 libwayland-egl1 libwayland-server0 libwww-perl libwww-robotrules-perl libx11-protocol-perl libxcb-shape0 libxcomposite1 libxcursor1 libxft2 libxi6 libxinerama1 libxkbcommon0 libxml-parser-perl libxml-twig-perl libxml-xpathengine-perl libxrandr2 libxtst6 libxv1 libxxf86dga1 perl-openssl-defaults systemd-sysv termit udev x11-utils x11-xserver-utils xdg-utils

      - browser-tools/install-chrome:
          replace-existing: true
          chrome-version: '114.0.5735.90'

      - run:
          name: versions
          command: |
            google-chrome --version
            node -v
            ruby -v


      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - restore_cache:
          name: Restore yarn cache
          keys:
            - montage-yarn-cachebust{{ checksum "yarn.lock" }}

      - run:
          name: Yarn Install
          command:  |
            yarn install --ignore-engines --cache-folder ~/.cache/yarn

      - run: bundle exec rake webpacker:compile

      - save_cache:
          name: Store yarn cache
          key: montage-yarn-cachebust{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Wait for redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      - run:
          name: Load DB schema
          environment:
            DATABASE_URL: "postgis://monstage_test:monstage_test@localhost:5432/monstage_test"
          command: |
            sudo apt-get update --allow-releaseinfo-change && sudo apt install postgresql-client
            bundle exec bin/rails db:create db:schema:load --trace




      - run:
          name: Run TestUnit
          command: PARALLEL_WORKERS=4 bundle exec rake test
      # beware, system tests on CI with more than 1 PARALLEL_WORKERS leads to OOM errors
      - run:
          name: Run Desktop TestSystem with headless_chrome
          command: |
            mkdir test-results
            PARALLEL_WORKERS=1 ~/project/infra/test/system_desktop.sh
      - store_artifacts:
          path: tmp/screenshots

      - run:
          name: Run Mobile TestSystem with headless_chrome using chrome's iPhone 6 emulation
          command: PARALLEL_WORKERS=1 ~/project/infra/test/system_mobile.sh

      - run:
          name: Run Desktop w3c System with headless_chrome
          command: PARALLEL_WORKERS=1 ~/project/infra/test/system_w3c.sh

      - run:
          name: a11y validation
          command: ~/project/node_modules/.bin/pa11y-ci $(find ~/project/tmp/w3c/*.html -name '*.html')

      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs

  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "64:44:1e:17:fb:00:ae:75:15:ba:d2:cb:ad:c2:95:ee"
      - run:
          name: Deploy staging to Clever Cloud
          command: |
            ssh-keyscan push-n2-par-clevercloud-customers.services.clever-cloud.com >>  ~/.ssh/known_hosts
            git remote add clever git+ssh://git@push-n2-par-clevercloud-customers.services.clever-cloud.com/$CLEVER_APP_ID.git
            git push -u clever staging:master -f
workflows:
  version: 2
  build-deploy:
      jobs:
        - build
        - deploy:
            requires:
              - build
            filters:
              branches:
                only:
                  - staging

