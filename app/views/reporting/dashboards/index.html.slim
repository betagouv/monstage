.container.mt-3
  = render partial: 'reporting/navigation'
  div.bg-stats-filter.rounded.p-3[data-controller='statistics']
    = render partial: 'reporting/filters',
            locals: {by_academy: false,
                      by_typology: false,
                      by_detailed_typology: false,
                      by_department: true,
                      by_school_track: false,
                      by_subscribed_school: false}
    = render partial: 'reporting/school_years_filter'

  .row.mt-5
    .col-12
      h2.text-body Stages sur la plateforme

  .row.mt-3.align-items-center.no-gutters.bg-light-blue.rounded.py-4
    .col-12.col-md-3.text-center
      h3.m-0.d-inline-block.text-warning-custom Entreprises
    .col-12.col-md-9
      .row
        .col-6.bl-1.br-1.bc-light
          .row.h-100
            .col-auto.align-self-center
              = inline_svg_pack_tag('media/images/icons/noun_job_offer_1461730-1.svg', class: 'fill-warning-custom')
            .col
              .row.no-gutters
                .col.align-self-center Offres proposées
                .col.align-self-center.text-right.h2.mb-0.text-warning-custom= count_by_private_sector["total_count"]
              .row.no-gutters.mt-3
                .col.align-self-center Dont PaQte
                .col.align-self-center.text-right.h3.mb-0.text-warning-custom= count_by_private_sector_pacte["total_count"]
        .col-6
          .row.h-100
            .col-auto.align-self-center
              = inline_svg_pack_tag('media/images/icons/noun_Handshake_2803586-1.svg', class: 'fill-warning-custom')
            .col
              .row.no-gutters
                .col.align-self-center Candidatures acceptées
                .col.align-self-center.text-right.h2.mb-0.text-warning-custom
                  span.mr-3= count_by_private_sector["approved_applications_count"]
              .row.no-gutters.mt-3
                .col.align-self-center Dont PaQte
                .col.align-self-center.text-right.h3.mb-0.text-warning-custom
                  span.mr-3= count_by_private_sector_pacte["approved_applications_count"]

  .row.mt-3.align-items-center.no-gutters.bg-light-blue.rounded.py-4
    .col-12.col-md-3.text-center
      h3.m-0.d-inline-block.text-blue-custom Administrations
    .col-12.col-md-9
      .row
        .col-6.bl-1.br-1.bc-light
          .row.h-100
            .col-auto.align-self-center
              = inline_svg_pack_tag('media/images/icons/noun_job_offer_1461730-1.svg', class: 'fill-blue-custom')
            .col.align-self-center Offres proposées
            .col.align-self-center.text-right.h2.mb-0.text-blue-custom= count_by_public_sector["total_count"]
        .col-6
          .row.h-100
            .col-auto.align-self-center
              = inline_svg_pack_tag('media/images/icons/noun_Handshake_2803586-1.svg', class: 'fill-blue-custom')
            .col.align-self-center Candidatures acceptées
            .col.align-self-center.text-right.h2.mb-0.text-blue-custom
              span.mr-3= count_by_public_sector["approved_applications_count"]

  .row.mt-3.align-items-center.no-gutters.bg-light-blue.rounded.py-4
    .col-12.col-md-3.text-center
      h3.m-0.d-inline-block.text-red-custom Associations
    .col-12.col-md-9
      .row
        .col-6.bl-1.br-1.bc-light
          .row.h-100
            .col-auto.align-self-center
              = inline_svg_pack_tag('media/images/icons/noun_job_offer_1461730-1.svg', class: 'fill-red-custom')
            .col.align-self-center Offres proposées
            .col.align-self-center.text-right.h2.mb-0.text-red-custom= count_by_association["total_count"]
        .col-6
          .row.h-100
            .col-auto.align-self-center
              = inline_svg_pack_tag('media/images/icons/noun_Handshake_2803586-1.svg', class: 'fill-red-custom')
            .col.align-self-center Candidatures acceptées
            .col.align-self-center.text-right.h2.mb-0.text-red-custom
              span.mr-3 -


  .row.mt-3.align-items-center.no-gutters.bg-less-light-blue.rounded.py-4
    .col-12.col-md-3.text-center
      h3.m-0.d-inline-block.text-counter-stats.nowrap.ml-3 Total des offres proposées
    .col-12.col-md-9
      .row
        .col-6.px-3.bl-1.br-1.bc-stats.h-100
          .row
            .offset-8.col-4.align-self-center.text-right.h2.mb-0.text-body
              span.text-counter-stats data-test-total="total-created-at"= [count_by_private_sector, count_by_public_sector, count_by_association].sum{|total_per_segment| total_per_segment.try(:[], "total_count") || 0}

        .col-6.px-3
          .row
            .col-8.align-self-center.h6.font-weight-normal.mb-0.text-body.text-counter-stats
              = "Total des "
              strong candidatures acceptées
            .col-4.align-self-center.text-right.h2.mb-0.text-body
              span.text-counter-stats.mr-3= [count_by_private_sector, count_by_public_sector, count_by_association].sum{|total_per_segment| total_per_segment.try(:[],"approved_applications_count") || 0}

  .row
    .col-12
      div.py-5[data-controller="chart"
               data-chart-internship-offer-created-at-by-month-value="#{internship_offer_created_at_by_month.to_json}"
               data-chart-internship-application-accepted-at-by-month-value="#{internship_application_approved_at_month.to_json}" ]
        div data-chart-target='svg'

  .row
    .col-12
      h3 Offres publiées par département
      #map
  
  .row
    .col-12
      h3 Offres publiées par rapport à la population par département
      #map2
  
  .row
    .col-12
      h3 Etablissements inscrits
      #map3

javascript:

  const width = 1000, height = 800;

  const path = d3.geoPath();

  const projection = d3.geoConicConformal() // Lambert-93
      .center([2.454071, 46.279229]) // Center on France
      .scale(2600)
      .translate([width / 2 - 50, height / 2]);

  path.projection(projection);

  const svg = d3.select('#map').append("svg")
      .attr("id", "svg")
      .attr("width", width)
      .attr("height", height)
      .attr("class", "Blues");

  const deps = svg.append("g");

  var promises = [];
  promises.push(d3.json("/departments.json"));
  promises.push(d3.csv("/offres.csv"));
  promises.push(d3.csv("/etablissements.csv"));

  var div = d3.select("body").append("div")   
    .attr("class", "tooltip")               
    .style("opacity", 0);

  Promise.all(promises).then(function(values) {
    
    const geojson = values[0]; // Récupération de la première promesse : le contenu du fichier JSON    
    const csv = values[1]; // Récupération de la deuxième promesse : le contenu du fichier csv
    
    var features = deps
        .selectAll("path")
        .data(geojson.features)
        .enter()
        .append("path")
        .attr('id', d => "d" + d.properties.CODE_DEPT)
        .attr("d", path);

    var quantile = d3.scaleQuantile()
      .domain([0, d3.max(csv, e => +e.OFFRES)])
      .range(d3.range(9));

    var legend = svg.append('g')
      .attr('transform', 'translate(725, 150)')
      .attr('id', 'legend');
    
    legend.selectAll('.colorbar')
      .data(d3.range(9))
      .enter().append('svg:rect')
          .attr('y', d => d * 20 + 'px')
          .attr('height', '20px')
          .attr('width', '20px')
          .attr('x', '0px')
          .attr("class", d => "q" + d + "-9")

    var legendScale = d3.scaleLinear()
      .domain([0, d3.max(csv, e => +e.OFFRES)])
      .range([0, 9 * 20]);

    var legendAxis = svg.append("g")
      .attr('transform', 'translate(750, 150)')
      .call(d3.axisRight(legendScale).ticks(6));

    csv.forEach(function(e,i) {

      var codeDept = e.CODE_DEPT.length < 2 ? "0" + e.CODE_DEPT : e.CODE_DEPT
      d3.select("#d" + codeDept)
          .attr("class", d => "department q" + quantile(+e.OFFRES) + "-9")
          .on("mouseover", function(d) {
              div.transition()        
                  .duration(200)      
                  .style("opacity", .9);
              div.html("<b>Académie : </b>" + e.NOM_REGION + "<br>"
                      + "<b>Département : </b>" + e.NOM_DEPT + "<br>"
                      + "<b>Offres : </b>" + e.OFFRES + "<br>")
                  .style("left", (d3.event.pageX + 30) + "px")     
                  .style("top", (d3.event.pageY - 30) + "px");
          })
          .on("mouseout", function(d) {
                  div.style("opacity", 0);
                  div.html("")
                      .style("left", "-500px")
                      .style("top", "-500px");
          });
    });

  });

  // 2e graph
  
  const svg2 = d3.select('#map2').append("svg")
    .attr("id", "svg")
    .attr("width", width)
    .attr("height", height)
    .attr("class", "Blues");

  const deps2 = svg2.append("g");

  Promise.all(promises).then(function(values) {
    
    const geojson = values[0]; // Récupération de la première promesse : le contenu du fichier JSON    
    const csv = values[1]; // Récupération de la deuxième promesse : le contenu du fichier csv
    
    var features = deps2
        .selectAll("path")
        .data(geojson.features)
        .enter()
        .append("path")
        .attr('id', d => "d_2_" + d.properties.CODE_DEPT)
        .attr("d", path);

    var quantile2 = d3.scaleQuantile()
      .domain([0, d3.max(csv, e => +(e.OFFRES / e.POP)*100000)])
      .range(d3.range(9));

    var legend2 = svg2.append('g')
      .attr('transform', 'translate(725, 150)')
      .attr('id', 'legend');
    
    legend2.selectAll('.colorbar')
      .data(d3.range(9))
      .enter().append('svg:rect')
          .attr('y', d => d * 20 + 'px')
          .attr('height', '20px')
          .attr('width', '20px')
          .attr('x', '0px')
          .attr("class", d => "q" + d + "-9")

    var legendScale2 = d3.scaleLinear()
      .domain([0, d3.max(csv, e => +(e.OFFRES / e.POP)*100000)])
      .range([0, 9 * 20]);

    var legendAxis = svg2.append("g")
      .attr('transform', 'translate(750, 150)')
      .call(d3.axisRight(legendScale2).ticks(6));

    csv.forEach(function(e,i) {

      var codeDept = e.CODE_DEPT.length < 2 ? "0" + e.CODE_DEPT : e.CODE_DEPT
      d3.select("#d_2_" + codeDept)
          .attr("class", d => "department q" + quantile2(+(e.OFFRES / e.POP)*100000) + "-9")
          .on("mouseover", function(d) {
              div.transition()        
                  .duration(200)      
                  .style("opacity", .9);
              div.html("<b>Académie : </b>" + e.NOM_REGION + "<br>"
                      + "<b>Département : </b>" + e.NOM_DEPT + "<br>"
                      + "<b>Offres par 100K hab : </b>" + Math.round(e.OFFRES / e.POP *100000) + "<br>")
                  .style("left", (d3.event.pageX + 30) + "px")     
                  .style("top", (d3.event.pageY - 30) + "px");
          })
          .on("mouseout", function(d) {
                  div.style("opacity", 0);
                  div.html("")
                      .style("left", "-500px")
                      .style("top", "-500px");
          });
    });
  });

  // 3e graph
  
  const svg3 = d3.select('#map3').append("svg")
    .attr("id", "svg")
    .attr("width", width)
    .attr("height", height)
    .attr("class", "Blues");

  const deps3 = svg3.append("g");

  Promise.all(promises).then(function(values) {
    
    const geojson = values[0]; // Récupération de la première promesse : le contenu du fichier JSON    
    const csv = values[2]; // Récupération de la 3e promesse : le contenu du fichier csv
    
    var features3 = deps3
        .selectAll("path")
        .data(geojson.features)
        .enter()
        .append("path")
        .attr('id', d => "d_3_" + d.properties.CODE_DEPT)
        .attr("d", path);

    var quantile3 = d3.scaleQuantile()
      .domain([0, d3.max(csv, e => +e.RATIO)])
      .range(d3.range(9));

    var legend3 = svg3.append('g')
      .attr('transform', 'translate(725, 150)')
      .attr('id', 'legend');
    
    legend3.selectAll('.colorbar')
      .data(d3.range(9))
      .enter().append('svg:rect')
          .attr('y', d => d * 20 + 'px')
          .attr('height', '20px')
          .attr('width', '20px')
          .attr('x', '0px')
          .attr("class", d => "q" + d + "-9")

    var legendScale3 = d3.scaleLinear()
      .domain([0, d3.max(csv, e => e.RATIO)])
      .range([0, 9 * 20]);

    var legendAxis3 = svg3.append("g")
      .attr('transform', 'translate(750, 150)')
      .call(d3.axisRight(legendScale3).ticks(6));

    csv.forEach(function(e,i) {

      var codeDept = e.CODE_DEPT.length < 2 ? "0" + e.CODE_DEPT : e.CODE_DEPT
      d3.select("#d_3_" + codeDept)
          .attr("class", d => "department q" + quantile3(+e.RATIO) + "-9")
          .on("mouseover", function(d) {
              div.transition()        
                  .duration(200)      
                  .style("opacity", .9);
              div.html("<b>Inscrits : </b>" + e.INSCRITS + "<br>"
                      + "<b>Non inscrits : </b>" + e.NON_INSCRITS + "<br>"
                      + "<b>Département : </b>" + e.CODE_DEPT + "<br>")
                  .style("left", (d3.event.pageX + 30) + "px")     
                  .style("top", (d3.event.pageY - 30) + "px");
          })
          .on("mouseout", function(d) {
                  div.style("opacity", 0);
                  div.html("")
                      .style("left", "-500px")
                      .style("top", "-500px");
          });
    });
  });
